--------------------4.5 Actividad práctica Manejo de Archivos mediante Servidor con Express-------------------------

###ProductManager.js 

1- crear clase product manager que se encarga de gestionar los productos almacenados en un archivo JSON,
Sus métodos permiten agregar, leer y buscar productos.

class ProductManager {
    constructor(path) {
        this.path = path; // Ruta del archivo donde se almacenarán los productos
    }
}

2- creo metodo readProducts que Lee el archivo JSON y devuelve su contenido como un arreglo de productos.
,Este método se utiliza internamente para cargar los datos antes de procesarlos.

readProducts() {
        try {
            if (fs.existsSync(this.path)) {
                const data = fs.readFileSync(this.path, 'utf-8'); // Usa fs.readFileSync correctamente
                return JSON.parse(data); // Convertir los datos a JSON
            }
            return []; // Si el archivo no existe, devolver un arreglo vacío
        } catch (error) {
            console.error('Error al leer el archivo:', error);
            return []; // Si ocurre un error, devolver un arreglo vacío
        }
    }

3- creo metodo saveProducts que Guarda un arreglo de productos en el archivo JSON.
Se utiliza internamente para actualizar el archivo cada vez que se agrega o modifica un producto.

saveProducts(products) {
    fs.writeFileSync(this.path, JSON.stringify(products, null, 2), 'utf-8'); // Guarda los datos en el archivo
}

3- creo metodo getProducts que 
    getProducts() {
        return this.readProducts();
    }

4- creo metodo addProduct que  Recibe un objeto con los datos de un producto,
le asigna un ID único y lo guarda en el archivo.

addProduct(product) {
        const products = this.readProducts();
        const newProduct = {
            id: products.length > 0 ? products[products.length - 1].id + 1 : 1,
            ...product
        };
        products.push(newProduct);
        this.saveProducts(products);
        return newProduct;
    }

5- creo metodo getProducts que Devuelve un arreglo con todos los productos almacenados 
en el archivo.

    getProducts() {
        return this.readProducts();
    }

6- creo metodo getProductById que Busca un producto por su ID y lo devuelve. 
Si no existe, lanza un error.

    getProductById(id) {
        const products = this.readProducts();
        const product = products.find(p => p.id === id);
        if (!product) {
            throw new Error(`Product with id ${id} not found.`);
        }
        return product;
    }

###app.js---> Este archivo es una aplicación Express que utiliza la clase `ProductManager`
para exponer endpoints API.

1- Configura el servidor Express y crea una instancia de `ProductManager`
con la ruta del archivo `products.json`:

const express = require('express');
const ProductManager = require('./ProductManager');

const app = express();
const port = 3000;

const productManager = new ProductManager('./products.json');

// Middleware para analizar JSON
app.use(express.json());

2- Devuelve todos los productos almacenados con get

app.get('/products', (req, res) => {
    try {
        const products = productManager.getProducts();
        res.json({ products });
    } catch (err) {
        res.status(500).json({ error: 'Error al obtener los productos.' });
    }
});

- **Respuesta**:
  ```json
  {
      "products": []
  }

3- Devuelve un producto específico por su ID con get 

app.get('/products/:pid', (req, res) => {
    try {
        const pid = parseInt(req.params.pid, 10); // Convierte el ID a un número
        const product = productManager.getProductById(pid);
        res.json({ product });
    } catch (err) {
        res.status(404).json({ error: err.message });
    }
});

- **Respuesta (si existe)**:
  ```json
  {
      "product": {
          "id": 1,
          "title": "Hat",
          "description": "A nice hat",
          "price": 20,
          "thumbnail": "hat.jpg",
          "code": "HAT001",
          "stock": 15
      }
  }
  ```
- **Respuesta (si no existe)**: json:

  {
      "error": "Product with id 1 not found."
  }

4- Recibe un producto en formato JSON, lo agrega al archivo `products.json` 
y devuelve el producto recién creado:

app.post('/products', (req, res) => {
    try {
        const newProduct = productManager.addProduct(req.body); // Agrega un nuevo producto
        res.status(201).json(newProduct); // Devuelve el producto agregado
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});

- **Ejemplo de solicitud**:
  ```json
  {
      "title": "Shoes",
      "description": "A pair of shoes",
      "price": 50,
      "thumbnail": "shoes.jpg",
      "code": "SH001",
      "stock": 10
  }

-----------------------------Prueba de endpoints--------------------------------------

0.Crea el archivo products.json: Antes de iniciar, crea un archivo vacío llamado products.json 
en el mismo directorio que los archivos ProductManager.js y app.js (aca se va a guardar cada producto que cree con el POST)

1. GET /products: Devuelve todos los productos almacenados.

devuelve []
porque no almacene ningun producto

GET /products/:pid: Reemplaza :pid con un ID (por ejemplo, 1) para obtener un producto específico.

devuelve porque no hay productos con el ID especificado
{
    "error": "Product with id NaN not found."
}

3.si intento agregar un producto con un POST   (no esta en el enunciado pero para probar )

app.post('/products', (req, res) => {
    try {
        const newProduct = productManager.addProduct(req.body);
        res.status(201).json(newProduct);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});

voy al postman, creo un producto nuevo con el metodo post->body->raw (escribo productos en formato JSON)

muestra cada producto nuevo , cada uno con su id -->creo 2 productos

Hago get y devuelve el arreglo con los 2 productos creados recien y se estan guardando en el products.json

si hago un get con la ruta localhost:3000/products/2 ---> devuelve el producto con el id:2